package com.example.project_jdbc.dbmanager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.project_jdbc.dbtable.ToOrder;

public class ToOrderManager {

private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableToOrder = "CREATE TABLE ToOrder(id_order BIGINT UNIQUE " +
			"GENERATED BY DEFAULT AS IDENTITY, id_magazyn BIGINT, amount_to_order INTEGER, " +
			"price DECIMAL, FOREIGN KEY (id_magazyn) REFERENCES Magazyn(id_position) ON DELETE CASCADE ON UPDATE CASCADE)";

	private PreparedStatement addOrderStmt;
	private PreparedStatement deleteOneOrderStmt;
	private PreparedStatement deleteAllOrdersStmt;
	private PreparedStatement updateOrderStmt;
	private PreparedStatement getInnerJoinOrdersStmt;
	private PreparedStatement getLeftJoinOrdersStmt;
	private PreparedStatement getAllOrdersStmt;

	private Statement statement;

	public ToOrderManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			boolean firstTableExists = false;
			while (rs.next()) {
				if ("ToOrder".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
				if ("Magazyn".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					firstTableExists = true;
				}
			}

			if (!tableExists && firstTableExists)
				statement.executeUpdate(createTableToOrder);

			addOrderStmt = connection
					.prepareStatement("INSERT INTO ToOrder (id_magazyn, amount_to_order, price) VALUES (?, ?, ?)");
			deleteAllOrdersStmt = connection
					.prepareStatement("DELETE FROM ToOrder");
			getAllOrdersStmt = connection
					.prepareStatement("SELECT id_order, id_magazyn, amount_to_order, price FROM ToOrder");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}
	
	void removeOrders() throws SQLException {
		try {
			connection.setAutoCommit(false);
			deleteAllOrdersStmt.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			connection.rollback();
		}
		finally {
			connection.setAutoCommit(true);
	    }
	}
	
	public int addOrder(ToOrder order) {
		int count = 0;
		try {
			addOrderStmt.setLong(1, order.getMagazynId());
			addOrderStmt.setInt(2, order.getOrderedAmount());
			addOrderStmt.setFloat(3, order.getPrice());

			count = addOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<ToOrder> getAllOrders() {
		List<ToOrder> orders = new ArrayList<ToOrder>();

		try {
			ResultSet rs = getAllOrdersStmt.executeQuery();

			while (rs.next()) {
				ToOrder tor = new ToOrder();
				tor.setId(rs.getInt("id_order"));
				tor.setMagazynId(rs.getLong("id_magazyn"));
				tor.setOrderedAmount(rs.getInt("amount_to_order"));
				tor.setPrice(rs.getInt("price"));
				orders.add(tor);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return orders;
	}

}
